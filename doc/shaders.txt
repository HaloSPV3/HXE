<!--
 Copyright (c) 2019 Emilian Roman
 
 This software is provided 'as-is', without any express or implied
 warranty. In no event will the authors be held liable for any damages
 arising from the use of this software.
 
 Permission is granted to anyone to use this software for any purpose,
 including commercial applications, and to alter it and redistribute it
 freely, subject to the following restrictions:
 
 1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software
    in a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
 2. Altered source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.
 3. This notice may not be removed or altered from any source distribution.
-->

POST-PROCESSING
===============

QUALITY LEVELS
--------------

The table below outlines the shader effects that are configurable by the
user with the following characteristics:

  Shader                Options
  --------------------- -------------------------------------------
  MXAO                  off, low, high
  DOF                   off, low, high
  Motion Blur           off, in-built, low, high
  Dynamic Lens Flares   off, on
  Volumetric Lighting   off, on
  Lens Dirt             off, on
  HUDv5 Visor           off, on
  3D                    off, anaglyph, interleaving, side-by-side
  Color Blind Mode      off, protanopia, deuteranopes, tritanopes

GLOBAL VARIABLE
---------------

When the user configures the post-processing effects, the settings are
encoded into a single integer that is assigned to the f1 global
variable. This allows SPV3 to infer the settings by decoding back the
settings, and thus tweak its post-processing effects to adhere to the
user's preferences.

  Variable   Description
  ---------- -------------------------------------------------------
  f1         Stores the user-defined post-processing configuration

This section specifies the encoding and decoding mechanisms which will
allow the user's post-processing settings to be saved as a single
integer to the initc.txt, and be loaded by SPV3 from the initc.txt,
accordingly.

For the encoding and decoding to work, we must settle on a standard that
formally identifies each post-processing option. An option, in this
context, is defined as a specific value of a specific shader.

The standard is to represent each option as a power of two. This permits
all of the user's chosen options to be summed together, and the total
value will always represent an unique configuration. Because of this
unique value, the powers of two we infer back from the number are
guaranteed to represent the user's choices.

INTEGERS

The following table showcases all of the available options, and their
respective integer representations:

  Post-Processing Effect   Option         2\^N Integer (HEX :: DEC)
  ------------------------ -------------- ---------------------------
  MXAO                     off            0x0000001 :: 1
                           low            0x0000002 :: 2
                           high           0x0000004 :: 4
  DOF                      off            0x0000008 :: 8
                           low            0x0000010 :: 16
                           high           0x0000020 :: 32
  Motion Blur              off            0x0000040 :: 64
                           in-built       0x0000080 :: 128
                           low            0x0000100 :: 256
                           high           0x0000200 :: 512
  Dynamic Lens Flares      off            0x0000400 :: 1024
                           on             0x0000800 :: 2048
  Volumetric Lighting      off            0x0001000 :: 4096
                           on             0x0002000 :: 8192
  Lens Dirt                off            0x0004000 :: 16384
                           on             0x0008000 :: 32768
  HUDv5 Visor              off            0x0010000 :: 65536
                           on             0x0020000 :: 131072
  3D                       off            0x0040000 :: 262144
                           anaglyph       0x0080000 :: 524288
                           interleaving   0x0100000 :: 1048576
                           side-by-side   0x0200000 :: 2097152
  Color Blind Mode         off            0x0400000 :: 4194304
                           protanopia     0x0800000 :: 8388608
                           deuteranopes   0x1000000 :: 16777216
                           tritanopes     0x2000000 :: 33554432

ENCODING

Encoding of the user configuration is done by summing up the integers
that represent the user's chosen options.

For example, let's assume that the user settles on the following
configuration:

-   MXAO: Low
-   DOF: High
-   Motion Blur: In-built
-   Dynamic Lens Flares: On
-   Volumetric Lighting: On
-   Lens Dirt: On
-   HUDv5 Visor: Off
-   3D: Anaglyph
-   Color Blind Mode: Protanopia

With reference to the table above, we can represent the configuration
with the following integers:

    { 2, 32, 128, 2048, 8192, 32768, 65536, 524288, 8388608 }

Now, we can sum all of these numbers and assign the total value to the
f1 variable in the initc.txt file:

    set f1 = 9021602

DECODING

Decoding is the inverse of the encoding procedure, i.e.Â representing the
loaded f1 variable as a sum of 2\^N numbers.

In light of the above documentation, let's assume that f1 = 9021602. The
needed code in SPV3 depends on the scripting language that will be used;
however, the final output must be the aforementioned array:

    { 2, 32, 128, 2048, 8192, 32768, 65536, 524288, 8388608 }

Once we have the array of 2\^N numbers that sum up to f1, we can analyse
it and infer the user's chosen post-processing options back. This
permits SPV3 to toggle or set each post-processing effect to a specific
value.

The following code is a Lua snippet that attempts to return the 2\^N
numbers that sum up to f1:

    function decode(n)
      local options = {}
      i = 1
      while i <= n do
        if bit.band(i, n) ~= 0 then
          table.insert(options, i)
        end
        i = bit.shl(i, 1)
      end
      return options
    end

DEFINITIONS
-----------

This document outlines the definitions for each shader effect, including
what it does and what technique is used.

AMBIENT OCCLUSION

> Technique used - MXAO 2.0 (Marty McFly's Ambient Obscurance)

Shading/rendering technique used to calculate how each point in the
scene is exposed to ambient light. Depending on the geometry, the
algorithm is used to apply dynamic shadows on occluded surfaces.

DEPTH OF FIELD

> Technique used - ADOF (Advanced Depth of Field)

Effect in which objects within some range of distances in a scene appear
in focus, and objects nearer or farther than this range appear out of
focus or blurred out. Just like any camera or your eye, ADOF enables
auto-focusing.

DYNAMIC FLARES

> Technique used - Dynamic Pseudo Lens Flares

Effect that shows lens flares automatically based on bright spots in the
scene.

LENS DIRT

> Technique used - Bloom & Lens Dirt

Effect that shows subtle dirt/scratch effects on the screen.

EYE ADAPTATION

> Technique used - Adaptive Contrast Curve

This effect automatically adjust the scene exposure based on ambient
light. Unlike commonly used implementations of this effect, the
adaptation is instant.

DEBANDING

> Technique used - Debanding

Effect which eliminated banding artifacts (sort of band like anomalies
that appear in otherwise smooth gradients of colors, due to small color
space/bit depth)
